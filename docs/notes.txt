
Datastructure
    -Required info
        -At every word you need:
            -bool start
            -end tickets
            -all possible nex words
                -list of edges with (object, int tickets)?
            -sum of all words and their tickets
                -function to sum tickets of edgelist?
    -Possible structure:
        -Object Word
            -int endTickets
            -String text
            -ArrayList<Edge> edges
            -public int edgeSum() returns sum of edges
            -public int checkWinner(int winningTicket) returns lottery winner
                -counts through all elements in list to find winner and returns i
        -Object Edge
            -Word word
            -int tickets
        -ArrayList<Word> starters
            -contains Words that start sentences in the og data
        -ArrayList<Word> allWords


Data processing algorithm:
    -READ FILE
    -create Word object if one does not exist
            -if allWords contains...
    -Check start of sentence (Bool start true -> false)
        -add to starters
    -At each word (not first of sentence)
        -add current word and 1 ticket to edgelist
            -add 1 to tickets if already exists in edgelist
        -check for end of sentence
            -(Bool start false -> true)
            -add 1 to endTickets

Generator algorithm:
    -String sentence = ""
    -Word curr = new Word(FILLER?)
    -Randomly pick one Word from the starter list
    -Word = word
    -sentence += Word." word"
    -Use lottery to randomly pick an Edge
        -check max lottery number with edgeSum()
        -check lottery number with rng.nextInt(0, edgeSum())
        -check winner i with checkWinner(lotteryNumber)
    -Word = word
    -sentence += Word." word"
    -Use lottery to check end of sentence
        -Trial and error testing to determine best chance.
        -Utilize Word endTickets
    -Repeat until end of sentence
    -return sentence += "."

Random ideas:
    -use lottery ticket system to determine chances?
        -each copy of the same word adds a ticket
        -use ordered list to determine ticket numbers
        -rng determines winning ticket

{3,4,5,3,2}

sum = 10

10 - 3 = 7
7 - 4 = 3
3 - 5 = -2